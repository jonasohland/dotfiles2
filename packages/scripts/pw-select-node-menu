#! /usr/bin/env python

import subprocess
import json
import argparse

def pw_dump():
    proc = subprocess.run('pw-dump', check=True, capture_output=True) 
    return json.loads(proc.stdout)

def pw_node_description(node):
    try:
        return node['info']['props']['node.description']
    except KeyError:
        return None

def pw_prop(node, name):
    try:
        return node['info']['props'][name]
    except KeyError:
        return ""

def pw_filter_none(dump, fn):
    return [obj for obj in dump if fn(obj) != None]

def pw_filter(dump, filter_spec):
   filter_spec_a = filter_spec.split('=') 
   prop = filter_spec_a[0]
   value = filter_spec_a[1]
   return [obj for obj in dump if pw_prop(obj, prop) == value]

def pw_select_sinks_dmenu(options, opt_fn):
    opt_names = [opt_fn(obj) for obj in options]
    result = subprocess.run(
            ['rofi', '-dmenu'], 
            input=bytearray('\n'.join(opt_names), encoding='utf-8'),
            capture_output=True, check=True)

    selected_name = result.stdout.decode(encoding='utf-8').rstrip()
    index = opt_names.index(selected_name)

    if index >= len(options):
        return None
    
    return options[index]

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--filter', nargs='+')
    args = parser.parse_args()

    dump = pw_filter_none(pw_dump(), pw_node_description)
    for filter_spec in args.filter:
        dump = pw_filter(dump, filter_spec)

    selected_option = pw_select_sinks_dmenu(dump, pw_node_description)
    
    print(selected_option['id'])
